# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  findFirstCategory(where: CategoryWhereInput, orderBy: [CategoryOrderByWithRelationInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int, distinct: [CategoryScalarFieldEnum!]): Category
  categories(where: CategoryWhereInput, orderBy: [CategoryOrderByWithRelationInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int, distinct: [CategoryScalarFieldEnum!]): [Category!]!
  aggregateCategory(where: CategoryWhereInput, orderBy: [CategoryOrderByWithRelationInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int): AggregateCategory!
  groupByCategory(where: CategoryWhereInput, orderBy: [CategoryOrderByWithAggregationInput!], by: [CategoryScalarFieldEnum!]!, having: CategoryScalarWhereWithAggregatesInput, take: Int, skip: Int): [CategoryGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): Post
  posts(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): [Post!]!
  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!
  groupByPost(where: PostWhereInput, orderBy: [PostOrderByWithAggregationInput!], by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupBy!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  findFirstProfile(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): Profile
  profiles(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): [Profile!]!
  aggregateProfile(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int): AggregateProfile!
  groupByProfile(where: ProfileWhereInput, orderBy: [ProfileOrderByWithAggregationInput!], by: [ProfileScalarFieldEnum!]!, having: ProfileScalarWhereWithAggregatesInput, take: Int, skip: Int): [ProfileGroupBy!]!
  user(where: UserWhereUniqueInput!): User
  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!
  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput!], by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupBy!]!
  person(personInput: PersonInput!): Person!
}

type Category {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  _count: CategoryCount
  posts(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): [Post!]!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type CategoryCount {
  posts: Int!
}

type Post {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  published: Boolean!
  authorId: Int
  _count: PostCount
  author: User
  categories(where: CategoryWhereInput, orderBy: [CategoryOrderByWithRelationInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int, distinct: [CategoryScalarFieldEnum!]): [Category!]!
}

type PostCount {
  categories: Int!
}

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String
  role: Role!
  _count: UserCount
  posts(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): [Post!]!
  profile: Profile
}

enum Role {
  user
  admin
}

type UserCount {
  posts: Int!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  content: StringFilter
  published: BoolFilter
  author: UserRelationFilter
  authorId: IntNullableFilter
  categories: CategoryListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  email: StringFilter
  name: StringNullableFilter
  role: EnumRoleFilter
  posts: PostListRelationFilter
  profile: ProfileRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IntFilter
  bio: StringNullableFilter
  user: UserRelationFilter
  userId: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  posts: PostListRelationFilter
}

input PostOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  content: SortOrder
  published: SortOrder
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  categories: CategoryOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  email: SortOrder
  name: SortOrder
  role: SortOrder
  posts: PostOrderByRelationAggregateInput
  profile: ProfileOrderByWithRelationInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProfileOrderByWithRelationInput {
  id: SortOrder
  bio: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostWhereUniqueInput {
  id: Int
}

enum PostScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  content
  published
  authorId
}

type Profile {
  id: Int!
  bio: String
  userId: Int!
  user: User!
}

input CategoryOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  posts: PostOrderByRelationAggregateInput
}

input CategoryWhereUniqueInput {
  id: Int
}

enum CategoryScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
}

type AggregateCategory {
  _count: CategoryCountAggregate
  _avg: CategoryAvgAggregate
  _sum: CategorySumAggregate
  _min: CategoryMinAggregate
  _max: CategoryMaxAggregate
}

type CategoryCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  name: Int!
  _all: Int!
}

type CategoryAvgAggregate {
  id: Float
}

type CategorySumAggregate {
  id: Int
}

type CategoryMinAggregate {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type CategoryMaxAggregate {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type CategoryGroupBy {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  _count: CategoryCountAggregate
  _avg: CategoryAvgAggregate
  _sum: CategorySumAggregate
  _min: CategoryMinAggregate
  _max: CategoryMaxAggregate
}

input CategoryOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  _count: CategoryCountOrderByAggregateInput
  _avg: CategoryAvgOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
  _sum: CategorySumOrderByAggregateInput
}

input CategoryCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
}

input CategoryAvgOrderByAggregateInput {
  id: SortOrder
}

input CategoryMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
}

input CategoryMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
}

input CategorySumOrderByAggregateInput {
  id: SortOrder
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input IntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type AggregatePost {
  _count: PostCountAggregate
  _avg: PostAvgAggregate
  _sum: PostSumAggregate
  _min: PostMinAggregate
  _max: PostMaxAggregate
}

type PostCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  title: Int!
  content: Int!
  published: Int!
  authorId: Int!
  _all: Int!
}

type PostAvgAggregate {
  id: Float
  authorId: Float
}

type PostSumAggregate {
  id: Int
  authorId: Int
}

type PostMinAggregate {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  content: String
  published: Boolean
  authorId: Int
}

type PostMaxAggregate {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  content: String
  published: Boolean
  authorId: Int
}

type PostGroupBy {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  published: Boolean!
  authorId: Int
  _count: PostCountAggregate
  _avg: PostAvgAggregate
  _sum: PostSumAggregate
  _min: PostMinAggregate
  _max: PostMaxAggregate
}

input PostOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  content: SortOrder
  published: SortOrder
  authorId: SortOrder
  _count: PostCountOrderByAggregateInput
  _avg: PostAvgOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  _sum: PostSumOrderByAggregateInput
}

input PostCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  content: SortOrder
  published: SortOrder
  authorId: SortOrder
}

input PostAvgOrderByAggregateInput {
  id: SortOrder
  authorId: SortOrder
}

input PostMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  content: SortOrder
  published: SortOrder
  authorId: SortOrder
}

input PostMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  content: SortOrder
  published: SortOrder
  authorId: SortOrder
}

input PostSumOrderByAggregateInput {
  id: SortOrder
  authorId: SortOrder
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  title: StringWithAggregatesFilter
  content: StringWithAggregatesFilter
  published: BoolWithAggregatesFilter
  authorId: IntNullableWithAggregatesFilter
}

input BoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input IntNullableWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedIntNullableWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input ProfileWhereUniqueInput {
  id: Int
  userId: Int
}

enum ProfileScalarFieldEnum {
  id
  bio
  userId
}

type AggregateProfile {
  _count: ProfileCountAggregate
  _avg: ProfileAvgAggregate
  _sum: ProfileSumAggregate
  _min: ProfileMinAggregate
  _max: ProfileMaxAggregate
}

type ProfileCountAggregate {
  id: Int!
  bio: Int!
  userId: Int!
  _all: Int!
}

type ProfileAvgAggregate {
  id: Float
  userId: Float
}

type ProfileSumAggregate {
  id: Int
  userId: Int
}

type ProfileMinAggregate {
  id: Int
  bio: String
  userId: Int
}

type ProfileMaxAggregate {
  id: Int
  bio: String
  userId: Int
}

type ProfileGroupBy {
  id: Int!
  bio: String
  userId: Int!
  _count: ProfileCountAggregate
  _avg: ProfileAvgAggregate
  _sum: ProfileSumAggregate
  _min: ProfileMinAggregate
  _max: ProfileMaxAggregate
}

input ProfileOrderByWithAggregationInput {
  id: SortOrder
  bio: SortOrder
  userId: SortOrder
  _count: ProfileCountOrderByAggregateInput
  _avg: ProfileAvgOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
  _sum: ProfileSumOrderByAggregateInput
}

input ProfileCountOrderByAggregateInput {
  id: SortOrder
  bio: SortOrder
  userId: SortOrder
}

input ProfileAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input ProfileMaxOrderByAggregateInput {
  id: SortOrder
  bio: SortOrder
  userId: SortOrder
}

input ProfileMinOrderByAggregateInput {
  id: SortOrder
  bio: SortOrder
  userId: SortOrder
}

input ProfileSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input ProfileScalarWhereWithAggregatesInput {
  AND: [ProfileScalarWhereWithAggregatesInput!]
  OR: [ProfileScalarWhereWithAggregatesInput!]
  NOT: [ProfileScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  bio: StringNullableWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

enum UserScalarFieldEnum {
  id
  createdAt
  updatedAt
  email
  name
  role
}

type AggregateUser {
  _count: UserCountAggregate
  _avg: UserAvgAggregate
  _sum: UserSumAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type UserCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  email: Int!
  name: Int!
  role: Int!
  _all: Int!
}

type UserAvgAggregate {
  id: Float
}

type UserSumAggregate {
  id: Int
}

type UserMinAggregate {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  name: String
  role: Role
}

type UserMaxAggregate {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  name: String
  role: Role
}

type UserGroupBy {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String
  role: Role!
  _count: UserCountAggregate
  _avg: UserAvgAggregate
  _sum: UserSumAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  email: SortOrder
  name: SortOrder
  role: SortOrder
  _count: UserCountOrderByAggregateInput
  _avg: UserAvgOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  email: SortOrder
  name: SortOrder
  role: SortOrder
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  email: SortOrder
  name: SortOrder
  role: SortOrder
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  email: SortOrder
  name: SortOrder
  role: SortOrder
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
}

input EnumRoleWithAggregatesFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumRoleFilter
  _max: NestedEnumRoleFilter
}

input NestedEnumRoleWithAggregatesFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumRoleFilter
  _max: NestedEnumRoleFilter
}

type Person {
  name: String!
  tags: [String]
}

input PersonInput {
  name: String!
}

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createManyCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  deleteManyCategory(where: CategoryWhereInput): AffectedRowsOutput!
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRowsOutput!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  createPost(data: PostCreateInput!): Post!
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deletePost(where: PostWhereUniqueInput!): Post
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  createProfile(data: ProfileCreateInput!): Profile!
  createManyProfile(data: [ProfileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  deleteManyProfile(where: ProfileWhereInput): AffectedRowsOutput!
  updateManyProfile(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): AffectedRowsOutput!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  createUser(data: UserCreateInput!): User!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deleteUser(where: UserWhereUniqueInput!): User
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
}

input CategoryCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  posts: PostCreateNestedManyWithoutCategoriesInput
}

input PostCreateNestedManyWithoutCategoriesInput {
  create: [PostCreateWithoutCategoriesInput!]
  connectOrCreate: [PostCreateOrConnectWithoutCategoriesInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutCategoriesInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  content: String!
  published: Boolean
  author: UserCreateNestedOneWithoutPostsInput
}

input UserCreateNestedOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  name: String
  role: Role
  profile: ProfileCreateNestedOneWithoutUserInput
}

input ProfileCreateNestedOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  bio: String
}

input ProfileCreateOrConnectWithoutUserInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutPostsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPostsInput!
}

input PostCreateOrConnectWithoutCategoriesInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutCategoriesInput!
}

type AffectedRowsOutput {
  count: Int!
}

input CategoryCreateManyInput {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
}

input CategoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutCategoriesInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input StringFieldUpdateOperationsInput {
  set: String
}

input PostUpdateManyWithoutCategoriesInput {
  create: [PostCreateWithoutCategoriesInput!]
  connectOrCreate: [PostCreateOrConnectWithoutCategoriesInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCategoriesInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [PostUpdateManyWithWhereWithoutCategoriesInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutCategoriesInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCategoriesInput!
  create: PostCreateWithoutCategoriesInput!
}

input PostUpdateWithoutCategoriesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  author: UserUpdateOneWithoutPostsInput
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
  disconnect: Boolean
  delete: Boolean
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpdateWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input ProfileUpdateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutUserInput
}

input ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileUpdateWithoutUserInput {
  bio: NullableStringFieldUpdateOperationsInput
}

input PostUpdateWithWhereUniqueWithoutCategoriesInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCategoriesInput!
}

input PostUpdateManyWithWhereWithoutCategoriesInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  content: StringFilter
  published: BoolFilter
  authorId: IntNullableFilter
}

input PostUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input PostCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  content: String!
  published: Boolean
  author: UserCreateNestedOneWithoutPostsInput
  categories: CategoryCreateNestedManyWithoutPostsInput
}

input CategoryCreateNestedManyWithoutPostsInput {
  create: [CategoryCreateWithoutPostsInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutPostsInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutPostsInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
}

input CategoryCreateOrConnectWithoutPostsInput {
  where: CategoryWhereUniqueInput!
  create: CategoryCreateWithoutPostsInput!
}

input PostCreateManyInput {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  content: String!
  published: Boolean
  authorId: Int
}

input PostUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  author: UserUpdateOneWithoutPostsInput
  categories: CategoryUpdateManyWithoutPostsInput
}

input CategoryUpdateManyWithoutPostsInput {
  create: [CategoryCreateWithoutPostsInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutPostsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutPostsInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutPostsInput!]
  deleteMany: [CategoryScalarWhereInput!]
}

input CategoryUpsertWithWhereUniqueWithoutPostsInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutPostsInput!
  create: CategoryCreateWithoutPostsInput!
}

input CategoryUpdateWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpdateWithWhereUniqueWithoutPostsInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutPostsInput!
}

input CategoryUpdateManyWithWhereWithoutPostsInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyMutationInput!
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
}

input ProfileCreateInput {
  bio: String
  user: UserCreateNestedOneWithoutProfileInput!
}

input UserCreateNestedOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileInput {
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  name: String
  role: Role
  posts: PostCreateNestedManyWithoutAuthorInput
}

input PostCreateNestedManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  content: String!
  published: Boolean
  categories: CategoryCreateNestedManyWithoutPostsInput
}

input PostCreateOrConnectWithoutAuthorInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutAuthorInput!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyAuthorInput {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  content: String!
  published: Boolean
}

input UserCreateOrConnectWithoutProfileInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProfileInput!
}

input ProfileCreateManyInput {
  id: Int
  bio: String
  userId: Int!
}

input ProfileUpdateInput {
  bio: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProfileInput
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpdateWithoutProfileInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  categories: CategoryUpdateManyWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorInput!
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input ProfileUpdateManyMutationInput {
  bio: NullableStringFieldUpdateOperationsInput
}

input UserCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  name: String
  role: Role
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: ProfileCreateNestedOneWithoutUserInput
}

input UserCreateManyInput {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  name: String
  role: Role
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutUserInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
}
